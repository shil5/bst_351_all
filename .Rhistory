library (survival) # Attach the package survival
time<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(time)
status<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(status)
ball<-data.frame(time,status) # Create a data set of the vectors time and status.
attach(ball)
km.ball<-survfit(Surv(time,status)) # Create a survival object
plot(km.ball,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library (survival) # Attach the package survival
time<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(time)
status<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(status)
yum<-data.frame(time,status) # Create a data set of the vectors time and status.
attach( yum)
km. yum<-survfit(Surv(time,status)) # Create a survival object
plot(km. yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library (survival) # Attach the package survival
time<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(time)
status<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(status)
yum<-data.frame(time,status) # Create a data set of the vectors time and status.
attach( yum)
km.yum<-survfit(Surv(time,status)) # Create a survival object
plot(km. yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library (survival) # Attach the package survival
time<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(time)
status<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(status)
yum<-data.frame(time,status) # Create a data set of the vectors time and status.
attach( yum)
km.yum<-survfit(Surv(time,status)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library (survival) # Attach the package survival
t<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(time)
stat<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(status)
yum<-data.frame(time,status) # Create a data set of the vectors time and status.
attach( yum)
km.yum<-survfit(Surv(time,status)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library (survival) # Attach the package survival
t<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(t)
stat<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(stat)
yum<-data.frame(t,stat) # Create a data set of the vectors time and stat.
attach( yum)
km.yum<-survfit(Surv(t,stat)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library (survival) # Attach the package survival
t<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(t)
stat<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(stat)
yum<-data.frame(t,stat) # Create a data set of the vectors time and stat.
attach(yum)
km.yum<-survfit(Surv(t,stat)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library (survival) # Attach the package survival
t<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(t)
stat<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(stat)
yum<-data.frame(t,stat) # Create a data set of the vectors time and stat.
attach(yum)
km.yum<-survfit(Surv(t,stat)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
t
stat
?rep
library(survival) # Attach the package survival
t<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(t)
stat<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(stat)
yum<-data.frame(t,stat) # Create a data set of the vectors time and stat.
attach(yum)
km.yum<-survfit(Surv(t,stat)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
ls()
library(survival) # Attach the package survival
t<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(t)
stat<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(stat)
yum<-data.frame(t,stat) # Create a data set of the vectors time and stat.
attach(yum)
km.yum<-survfit(Surv(t,stat)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library(survival) # Attach the package survival
tata<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(tata)
stat<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(stat)
yum<-data.frame(tata,stat) # Create a data set of the vectors time and stat.
attach(yum)
km.yum<-survfit(Surv(tata,stat)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library(survival) # Attach the package survival
tata<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(tata)
stts<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(sta)
yum<-data.frame(tata,stts) # Create a data set of the vectors time and stts.
attach(yum)
km.yum<-survfit(Surv(tata,stts)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
library(survival) # Attach the package survival
tata<-c(17.88,28.92,33.0,41.52,42.12,45.60,48.48,51.84,51.96,54-12,55.56,67.80,
68.64,68.64,68.88,84.12,93.12,98.64,105.12,105.84,127.92,128.04,173.4)
# Create a vector of survival times.
length(tata)
stts<-c(rep(1,23)) # Create a vector which indicates whether the
#survival time is censored or complete. 1 indicates complete and zero indicates censored
length(sta)
yum<-data.frame(tata,stts) # Create a data set of the vectors time and stts.
attach(yum)
km.yum<-survfit(Surv(tata,stts)) # Create a survival object
plot(km.yum,conf.int=F,xlab= "time",ylab= "survival function",
main="Non-parametric estimator of survival function", cex=.6)
# Plot empirical survival curve.
x<-c(142,149,320,345+,560,805,1130+,1720,2480+,4210+,5230,6890);x
length(x)
sx<-sort(x)
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
length(time);
status< -c(l, 1,1,0,1,1,0,1,0,0,1,1);
length(status);
[I] 12
ctrl< - data. frame(time,status);
attach(ctrl);
library (survival);
km.ctrl< - survfit(Surv(time,status==l));
summary (km. ctrl);
Groupwise survival curves (Illustration 5.4)
time<-c(5, 5,8,8,12,16,23,27,30, 33, 43, 45, 9, 13, 13, 18, 23, 28, 31,
34, 45, 48, 161)
length(time)
[1] 23
status< -c(rep(l,5),0,rep(l,6),1,1,0,1,1,0,1,1,0,1,0)
gr< -c(rep(l,12),rep(2,ll))
ctc< - data.frame(time,status,gr)
etc
#KM estimation acc to
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
status<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(status)
#KM estimation acc to
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
status<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(status)
ctrl<-data.frame(time,status);ctrl
?data.frame
#KM estimation acc to
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
status<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(status)
ctrl<-data.frame(time,status,row.names = "sdfdsf");ctrl
#KM estimation acc to
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
status<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(status)
ctrl<-data.frame(time,status,row.names = list("sdfdsf","fdsf");ctrl
#KM estimation acc to
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
status<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(status)
ctrl<-data.frame(time,status,row.names = list("sdfdsf","fdsf"));ctrl
#KM estimation acc to
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
status<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(status)
ctrl<-data.frame(time,status,row.names = c("sdfdsf","fdsf"));ctrl
#KM estimation acc to
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
status<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(status)
ctrl<-data.frame(time,status);ctrl
?attach
#KM estimation acc to
time<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(time)
status<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(status)
ctrl<-data.frame(time,status);ctrl
attach(ctrl)
library(survival)
km.ctrl<-survfit(Surv(time,status==1))
summary (km.ctrl)
# GAMMA
#a or alpha is shape par
b<-1 # or lambda is 1/scale par
x<-seq(0,10,0.1)
ps<-as<-cs<-sfs<-hxs<-Hxs<-NULL
for(i in 1:7){
a<-0.5*i
as<-c(as,a)
#PDF
pdf<-dgamma(x,a,1/b)
ps<-rbind(ps,pdf)
#CDF
cdf<-pgamma(x,a,1/b) #lower.tail=TRUE means P(X<=x)(default)
cs<-rbind(cs,cdf)
#SF
sf<-1-cdf
sfs<-rbind(sfs,sf)
#HAZARD FN
hx<-(pdf/sf)
hxs<-rbind(hxs,hx)
#CUM HAZARD FN
integrand<-function(x){
a/b*x^()
}  # !!!DOUBT for function
Hx<-c()
for(i in 1:101){
objj<-integrate(integrand,lower=0,upper=x[i])
#unlist() or str() not reqd. over integrate
Hx<-c(Hx,objj$value)
}
Hxs<-rbind(Hxs,Hx)
}
#PDF
rownames(ps)<-as
colnames(ps)<-x;ps
matplot(x,t(ps),type="l",main="PDF for X~gamma(??)",lty=1,lwd=2,col=1:5,ylab="PDF: f(x)",
ylim=c(0,2),xlim=c(0,6))
# oR as<-seq(0.5,2.5,0.5)
legend("topright",inset=0.01,legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
#CDF
rownames(cs)<-as
colnames(cs)<-x;cs
matplot(x,t(cs),type="l",main="CDF for X~gamma(??)",lty=1,lwd=2,col=1:5,ylab="CDF: F(x)",
ylim=c(0,1),xlim=c(0,6))
legend("topright",inset=0.01,legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
#SF
rownames(sfs)<-as
colnames(sfs)<-x;sfs
matplot(x,t(sfs),type="l",main="SF for X~gamma(??)",lty=1,lwd=2,col=1:5,ylab="SF: S(x)",
ylim=c(0,1),xlim=c(0,6))
legend("topright",inset=0.01,legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
#HAZARD FN
rownames(hxs)<-as
colnames(hxs)<-x;hxs
matplot(x,t(hxs),type="l",main="HAZARD FN. for X~gamma(??)",lty=1,lwd=2,col=1:5,ylab="HF: h(x)",
ylim=c(0,3),xlim=c(0,6))
legend("topright",inset=0.01,legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
#CUM HAZARD FN
rownames(Hxs)<-as
colnames(Hxs)<-x;hxs
matplot(x,t(Hxs),type="l",main="CUMULATIVE HAZARD FN. for X~gamma(??)",lty=1,lwd=2,
col=1:5,ylab="CHF: H(x)",ylim=c(0,10),xlim=c(0,10))
legend("topleft",inset=0.01,legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
# GENERALISED EXPONENTIAL DISTN
#a or ?? is SHAPE par
b<-1 #b or ?? is SCALE par
x<-seq(from=0,to=10,by=0.1)
ps<-as<-cs<-sfs<-hxs<-Hxs<-NULL
for(i in 1:7){
a<-0.5*i
as<-c(as,a)
#PDF
pdf<-dweibull(x,a,b)
ps<-rbind(ps,pdf)
#CDF
cdf<-pweibull(x,a,b) #lower.tail=TRUE means P(X<=x)(default)
cs<-rbind(cs,cdf)
#SF
sf<-1-cdf
sfs<-rbind(sfs,sf)
#HAZARD FN
hx<-(pdf/sf)
hxs<-rbind(hxs,hx)
#CUM HAZARD FN
integrand<-function(x){(a/b^a)*(x^(a-1))}  # !!!DOUBT for function
Hx<-c()
for(i in 1:101){
objj<-integrate(integrand,lower=0.00001,upper=x[i]) #DOUBT WHY NOT ZERO
Hx<-c(Hx,objj$value)
}
Hxs<-rbind(Hxs,Hx)
}
#PDF
rownames(ps)<-as
colnames(ps)<-x;ps
matplot(x,t(ps),type="l",main="PDF for X~weibull(??)",lty=1,lwd=2,col=1:5,ylab="PDF: f(x)",
ylim=c(0,1.4),xlim=c(0,4))
legend("topright",inset=0.01,legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
#CDF
rownames(cs)<-as
colnames(cs)<-x;cs
matplot(x,t(cs),type="l",main="CDF for X~weibull(??)",lty=1,lwd=2,col=1:5,ylab="CDF: F(x)",
ylim=c(0,1),xlim=c(0,6))
legend("topright",inset=0.01,legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
#SF
rownames(sfs)<-as
colnames(sfs)<-x;sfs
matplot(x,t(sfs),type="l",main="SF for X~weibull(??)",lty=1,lwd=2,col=1:5,ylab="SF: S(x)",
ylim=c(0,1),xlim=c(0,6))
legend("topright",inset=0.01,legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
#HAZARD FN
rownames(hxs)<-as
colnames(hxs)<-x;hxs
matplot(x,t(hxs),type="l",main="HAZARD FN. for X~weibull(??)",lty=1,lwd=2,col=1:5,ylab="HF: h(x)",
ylim=c(0,5),xlim=c(0,4))
legend("topright",legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
#CUM HAZARD FN
rownames(Hxs)<-as
colnames(Hxs)<-x;hxs
matplot(x,t(Hxs),type="l",main="CUMULATIVE HAZARD FN. for X~weibull(??)",lty=1,lwd=2,
col=1:5,ylab="CHF: H(x)",ylim=c(0,4),xlim=c(0,4))
legend("bottomright",legend=as,lty=1,lwd=2,col=1:5,bg=("white"),
horiz=F,title="Value of ??")
# SHILPA 2017IMSST008
# KM estimation Deshpande Table 5.7
Ti<-c(142,149,320,345,560,805,1130,1720,2480,4210,5230,6890)
length(Ti)
Ni<-c(1,1,1,0,1,1,0,1,0,0,1,1)
length(Ni)
ctrl<-data.frame(Ti,Ni);ctrl
library(survival)
km.ctrl<-survfit(Surv(ctrl$Ti,ctrl$Ni==1))
summary (km.ctrl)
#Groupwise survival curves
Ti<-c(5,5,8,8,12,16,23,27,30, 33, 43, 45, 9, 13, 13, 18, 23, 28, 31,
34,45,48,161)
length(Ti)
Ni<-c(rep(1,5),0,rep(1,6),1,1,0,1,1,0,1,1,0,1,0)
pulse<-c(rep(1,12),rep(2,11))
final<- data.frame(Ti,Ni,pulse);final
surv.bygr<-survfit(Surv(Ti,Ni==1)~ pulse)
plot(surv.bygr,conf.int=F,xlab= "Ti",ylab= "survival fn",
main= "2 Constructed S(t) curves",cex=.6)
